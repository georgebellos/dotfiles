"  Author: George Bellos <georgebellos@me.com>
"  Source: http://github.com/georgebellos/dotfiles/tree/master/vim
" setup ----------------------------------------------------------------- {{{
set nocompatible " be iMproved
filetype off     " required!
set rtp+=~/.vim/bundle/vundle/ " path to install plugins

call vundle#rc()
Bundle 'gmarik/vundle'

" Use local bundles if available
if filereadable(expand("~/.vimrc.bundles.local"))
  source ~/.vimrc.bundles.local
endif
" }}}
" Plugins via Vundle --------------------------------------------------- {{{
" Git, Buffers, Undo, Fuzzy file finder-----------------------{{{

"Git on your Vim
Bundle 'tpope/vim-fugitive'
Bundle 'kablamo/vim-git-log'

" Create gists
if executable('curl')
  Bundle 'mattn/gist-vim'
endif

"-------------------------
" Navigation - Buffers
"-------------------------

" Sidebar for files
Bundle 'scrooloose/nerdtree'

" Fuzzy file finder
Bundle 'kien/ctrlp.vim'
Bundle 'tacahiroy/ctrlp-funky'

"undo managment
Bundle 'sjl/gundo.vim'

" Manage Buffers
Bundle 'jeetsukumaran/vim-buffergator'
"Bundle 'niklasb/bufkill.vim'

" Tagbar
if executable('ctags')
  Bundle 'majutsushi/tagbar'
endif

" Autotag
"Bundle 'AutoTag'

" almost a shell
"Bundle 'ervandew/screen'

" Zoom windows
"Bundle 'vim-scripts/ZoomWin'

" Session Managment
Bundle 'xolox/vim-session'
Bundle 'xolox/vim-misc'
Bundle 'mhinz/vim-startify'

" Advanced search with ack -> https://github.com/mileszs/ack.vim
if executable('ack')
  Bundle 'mileszs/ack.vim'
endif

" line up text with tabular
"Bundle 'godlygeek/tabular'
" }}}
" Editing - Automating--------------------------------------------------{{{

" Syntax checking
"Bundle 'scrooloose/syntastic'

" Enhaced motions
Bundle 'Lokaltog/vim-easymotion'

" Delete,change,add surroundings(parentheis, brackets, etc)
Bundle 'tpope/vim-surround'

" end certain structures automatically
Bundle 'tpope/vim-endwise'

" complementary pairs of mappings
Bundle 'tpope/vim-unimpaired'

" Select and operate on various types of objects
Bundle 'vim-indent-object'
Bundle 'vim-scripts/argtextobj.vim'

" Commnets
Bundle 'scrooloose/nerdcommenter'
Bundle 'tomtom/tcomment_vim'

" Enhaced tab
Bundle 'ervandew/supertab'

" Enhaced Repeat Command
Bundle 'tpope/vim-repeat'

" Remaps the <Space> key to act as a clever key to repeat motions.
"Bundle 'spiiph/vim-space'

" Extended matching with %
Bundle 'edsono/vim-matchit'

" Support writing user-defined text objects
Bundle 'kana/vim-textobj-user'

" Readline mappings insert, command mode
Bundle 'tpope/vim-rsi'

Bundle 'tpope/vim-dispatch'

" Snippets
"Bundle 'garbas/vim-snipmate'
"Bundle 'honza/snipmate-snippets'
Bundle 'SirVer/ultisnips'
"Bundle 'Shougo/neocomplcache'
"Bundle 'Shougo/neosnippet'
"Bundle 'cometsong/vim-autocomplpop'
"Bundle 'L9'

" interpret a file by function and cache file automatically
Bundle 'MarcWeber/vim-addon-mw-utils'

" Focusing - editing on a region
"Bundle 'chrisbra/NrrwRgn'

" Increase dates and times
Bundle 'tpope/vim-speeddating'

" Sudo gui
"Bundle 'gmarik/sudo-gui.vim'

Bundle 'tomtom/tlib_vim'

" Code Substitution
Bundle 'AndrewRadev/switch.vim'

" shell support
Bundle 'tpope/vim-eunuch'

" Tmux support
Bundle 'benmills/vimux'

"}}}
" Ruby development support----------------------------------------------- {{{

"highlighting-warnings-checking
Bundle 'vim-ruby/vim-ruby'

" Ruby vim objects
Bundle 'nelstrom/vim-textobj-rubyblock'
Bundle 'bootleq/vim-textobj-rubysymbol'

" Rvm support in vim
"Bundle 'tpope/vim-rvm'

" Dependencies
" Bundle 'tpope/vim-bundler'

" similar with rails.vim but for all ruby projects
Bundle 'tpope/vim-rake'

" execute ruby files in a buffer
Bundle 'henrik/vim-ruby-runner'

" execute ruby marked lines textmate style
Bundle 't9md/vim-ruby-xmpfilter'

" Ruby Testing
"-------------------------

" Run Ruby Tests
Bundle 'skalnik/vim-vroom'
Bundle 'sunaku/vim-ruby-minitest'

Bundle 'rson/vim-conque'
Bundle 'skwp/vim-ruby-conque'

" tmux and ruby
"Bundle 'pgr0ss/vimux-ruby-test'

" Debugger support
"Bundle 'astashov/vim-ruby-debugger'


" Documentation
Bundle 'danchoi/ri.vim'
Bundle 'lucapette/vim-ruby-doc'
"Bundle 'danchoi/rb_nav'


" Refactoring Ruby
" Bundle 'ecomba/vim-ruby-refactoring'

"--------------------------
" Rails development support
"--------------------------
Bundle 'tpope/vim-rails'

" }}}
" Cocoa development support -------------------------------------------- {{{
"--------------------------
Bundle 'msanders/cocoa.vim'

Bundle 'eraserhd/vim-ios'

Bundle 'Rip-Rip/clang_complete'

"identation
Bundle "b4winckler/vim-objc"

" RubyMotion
Bundle 'rcyrus/snipmate-snippets-rubymotion'

" }}}
" Web development support -------------------------------------------------- {{{

" Javascript development support
Bundle 'kchmck/vim-coffee-script'
Bundle 'pangloss/vim-javascript'
Bundle 'leshill/vim-json'
Bundle 'itspriddle/vim-jquery'
"Bundle 'groenewege/vim-less'
"Bundle 'taxilian/vim-web-indent'


"-----------------------------
" Html/Css development support
"-----------------------------

Bundle 'tpope/vim-haml'
"Bundle 'vim-scripts/HTML-AutoCloseTag'
"Bundle 'rstacruz/sparkup', {'rtp': 'vim'}
"Bundle 'ap/vim-css-color' "slow down my rails files
"Bundle 'mattn/zencoding-vim'
"Bundle 'ChrisYip/Better-CSS-Syntax-for-Vim'
Bundle 'tpope/vim-liquid'
Bundle 'hallison/vim-markdown'
"Bundle 'tpope/vim-markdown'
Bundle "nelstrom/vim-markdown-folding"
Bundle "skammer/vim-css-color"
Bundle "cakebaker/scss-syntax.vim"
" }}}
" Vim Interface---------------------------------------------------------- {{{

" Fancy status line
"Bundle 'Lokaltog/powerline', {'rtp': 'powerline/bindings/vim/'}

" handle colors easier -> https://github.com/Rykka/colorv.vim
"Bundle 'Rykka/colorv.vim'

" Colorschemes
Bundle 'altercation/vim-colors-solarized'
Bundle 'wgibbs/vim-irblack'
Bundle 'sjl/badwolf'
Bundle 'tomasr/molokai'
Bundle 'jpo/vim-railscasts-theme'
Bundle 'spf13/vim-colors'
"Bundle 'flazz/vim-colorschemes'
Bundle 'eddsteel/vim-lanai'

" }}}
"Productivity ----------------------------------------------{{{
Bundle 'amdt/sunset'
Bundle 'chrisbra/Recover.vim'
Bundle 'tangledhelix/vim-octopress'
" }}}
" Other Languages Support------------------------------------------------ {{{

"Clojure
"Bundle 'vim-scripts/VimClojure'
Bundle 'tpope/vim-fireplace'
Bundle 'tpope/vim-classpath'
Bundle 'guns/vim-clojure-static'
Bundle 'guns/paredit'
Bundle 'kien/rainbow_parentheses.vim'

"Haskell
"Bundle 'wlangstroth/vim-haskell'

"Elixir
Bundle 'elixir-lang/vim-elixir'
Bundle 'oscarh/vimerl'
Bundle 'mattonrails/vim-mix'
Bundle 'carlosgaldino/elixir-snippets'
" }}}

" Documention via dash
Bundle 'rizzatti/dash.vim'
Bundle 'rizzatti/funcoo.vim'

" }}}
" Vim configuration ------------------------------------------------------- {{{
" Directories {{{
set backup
set backupdir=~/.vim/dirs/backup
set directory=~/.vim/dirs/temp

set history=1000                " Store a ton of history (default is 20)
set noswapfile

if has('persistent_undo')
  set undofile                "so is persistent undo ...
  set undolevels=1000         "maximum number of changes that can be undone
  set undoreload=10000        "maximum number lines to save for undo on a buffer reload
endif

if exists("&undodir")
  set undodir=~/.vim/dirs/undo
endif

"Thesaurus Setup
set thesaurus+=~/.vim/thesaurus/ruby.txt
set thesaurus+=~/.vim/thesaurus/roget13a.txt

"}}}
" Interface - gui ----------------------------------------------------- {{{

" ---------------
"  Colorscheme
" ---------------

"set guifont=Monaco:h12
set guifont=Monaco\ for\ Powerline:h12
"set guifont=Consolas+for+powerline:h12
if has('gui_running')
  color solarized
else
  color Tomorrow-Night
endif


set background=light
set antialias                     " MacVim: smooth fonts.
set synmaxcol=120                 " Prevent lag on long lines (default: 3000)
set ruler                         " Ruler on
set nu                            " Line numbers on
set wrap

"Color the 80th column differently
"if exists('+colorcolumn')
  "set colorcolumn=80
"endif

"-------------------------------
" Windows, Toolbars and cursor
"-------------------------------

if has('gui_macvim')
  " Use option (alt) as meta key.
  set macmeta

  if has("gui_running")             " Hide Toolbar in MacVim
    set guioptions=egmrt
  endif
endif

set guioptions-=T                 " Hide toolbar.
set guioptions-=L                 " Hide left scrolbar.
set guioptions-=r                 " Hide right scrolbar.

"----------------------
"      Status Bar
"----------------------

set laststatus=2                  " Always show the statusline
set cmdheight=1                   " Make the command area two lines high



" Cursor and cursorline settings
set gcr=n:blinkon0                         " no blinking cursor in normal mode
set gcr=a:blinkon0                         " stop blinking cursor in all modes
set cursorline                             " Show cursor line
highlight lCursor guifg=white guibg=red    " different color cursor for greek key map

" Use a bar-shaped cursor for insert mode, even through tmux.
" tmux cursor bar shaped cursor for insert mode
if exists('$TMUX')
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif


" Visual
set showmatch                     " Show matching brackets.
set scrolloff=5                   " show 3 lines of context around the cursor.
set virtualedit=onemore           " allow for cursor beyond last character

" Disable tooltips for hovering keywords in Vim
if exists('+ballooneval')
  " This doesn't seem to stop tooltips for Ruby files
  set noballooneval
  " 100 second delay seems to be the only way to disable the tooltips
  set balloondelay=100000
endif

" Sounds
set noerrorbells
set novisualbell
set t_vb=

" Mouse
set mousehide  " Hide mouse after chars typed
set mouse=a  " Mouse in all modes


" }}}
"   Behaviors {{{

filetype plugin indent on         " Automatically detect file types.
set encoding=utf-8
syntax enable
set autoread                      " Automatically reload changes if detected
set cf                            " Enable error files & error jumping.
set clipboard+=unnamed            " Yanks go on clipboard instead.
set autowrite                     " Writes on make/shell commands
set formatoptions=crql
set iskeyword+=$,@                " Add extra characters that are valid parts of variables
set showcmd

set hidden                        " allow buffer switching without saving
set noea                          " dont resize bufffers automatically
set isfname+=32    " have a space (ASCII 32) considered as a valid character for a file name

"Folding
set foldmethod=indent
set foldlevelstart=99             " Remove folds when you open a file

"folding for vimscript files
augroup filetype_vim
    autocmd!
    autocmd FileType vim setlocal foldmethod=marker
augroup END
" }}}
" Text Format {{{
" ---------------
set nowrap                        " don't wrap lines
"set autoindent                    " indent at the same level of the previous line
set tabstop=2
set backspace=2                   " Delete everything with backspace
"set shiftwidth=2                  " Tabs under smart indent
"set cindent
set smarttab


" ---------------
" Whitespace
" ---------------

set shiftwidth=2                  " an autoindent (with <<) is two spaces
set expandtab                     " use spaces, not tabs
set list                          " Show invisible characters
set backspace=indent,eol,start    " backspace through everything in insert mode

if exists("g:enable_mvim_shift_arrow")
  let macvim_hig_shift_movement = 1 " mvim shift-arrow-keys
endif


"set pastetoggle=<F12>           " pastetoggle (sane indentation on pastes)


" ---------------
" List chars
" ---------------

set listchars=""                  " Reset the listchars
set listchars=tab:\ \             " a tab should display as "  ", trailing whitespace as "."
set listchars+=trail:.            " show trailing spaces as dots
set listchars+=extends:>          " The character to show in the last column when wrap is
" off and the line continues beyond the right of the screen
set listchars+=precedes:<         " The character to show in the last column when wrap is
" off and the line continues beyond the right of the screen

" }}}
"   Searching  & Completion ----------------------------------------------------- {{{

set hlsearch                      " highlight matches
set incsearch                     " incremental searching
set ignorecase                    " searches are case insensitive...
set smartcase                     " ... unless they contain at least one capital letter
set wildignore+=*.o,*.obj,*.exe,*.so,*.dll,*.pyc,.svn,.hg,.bzr,.git,.sass-cache,*.class,*.scssc



set complete=.,w,b,u,U
set completeopt=menu,preview

"set complete=.,b,u,],t,s,k
"set complete=.,w,b,u,U,]

"with Thesaurus
"set complete+=s

"dictionary
" set complete+=k

" -----------------
" Wildmenu settings
" -----------------

set wildmenu                      " Turn on WiLd menu

set showmode                     "shomode and wild menu

set wildmode=list:longest,list:full  " more results not just one

" Disable output and VCS files
set wildignore+=*.o,*.out,*.obj,.git,*.rbc,*.rbo,*.class,.svn,*.gem

" Disable archive files
set wildignore+=*.zip,*.tar.gz,*.tar.bz2,*.rar,*.tar.xz

" Ignore bundler and sass cache
set wildignore+=*/vendor/gems/*,*/vendor/cache/*,*/.bundle/*,*/.sass-cache/*

" Ignore temp and backup files
set wildignore+=*.swp,*~,._*

" Ignore OSX .ds_store files
set wildignore+=*.DS_Store$


"--------------------
" general
"--------------------

autocmd FileType xml setlocal macmeta              " required for MacVim
autocmd FileType xml imap <buffer> <M-D-.> </<C-X><C-O>

"Fix terminal timeout when pressing escape
"When you’re pressing Escape to leave insert mode in the terminal, it will by default take a second or another keystroke to leave insert mode completely and update the statusline. If you find this annoying, you can add the following snippet to your vimrc to escape insert mode immediately:

if ! has('gui_running')
    set ttimeoutlen=10
    augroup FastEscape
        autocmd!
        au InsertEnter * set timeoutlen=0
        au InsertLeave * set timeoutlen=1000
    augroup END
endif

" }}}
" Mapping ------------------------------------------------------------ {{{

"The default leader is '\', but many people prefer ',' as it's in a standard location
let mapleader=","

"next buffer via leader .
map <leader>. :bn<cr>

" preview markdown files with Marked app
:nnoremap <leader>om :silent !open -a Marked.app '%:p'<cr>

" open current directory in iterm
:nnoremap <leader>it :!open -a iTerm .<cr>
":nnoremap <leader>ir :!open -a iTerm :p:h:h<cr>

" edit .vimrc file
:nnoremap <leader>ev :edit $MYVIMRC<cr>
:nnoremap <leader>eg :edit $MYGVIMRC<cr>

" source .vimrc
:nnoremap <leader>sv :source $MYVIMRC<cr>
:nnoremap <leader>sg :source $MYGVIMRC<cr>

" insert new line below and above without entering insert mode
nnoremap <C-J> m`o<Esc>``
nnoremap <C-K> m`O<Esc>``

" greek support via keymap
map <leader>km :set keymap=greek_utf-8<CR>
map <leader>kn :set keymap=<CR>


"-------------------------------
" Janus Mappings
"-------------------------------

"" General Mappings (Normal, Visual, Operator-pending)

" Toggle paste mode
nmap <silent> <F4> :set invpaste<CR>:set paste?<CR>
imap <silent> <F4> <ESC>:set invpaste<CR>:set paste?<CR>

" format the entire file
nmap <leader>fef ggVG=

" upper/lower word
noremap <leader>u mQviwU`Q
noremap <leader>l mQviwu`Q

" upper/lower first char of word
noremap <leader>U mQgewvU`Q
noremap <leader>L mQgewvu`Q

" cd to the directory containing the file in the buffer
nmap <silent> <leader>cd :lcd %:h<CR>

" Create the directory containing the file in the buffer
nmap <silent> <leader>md :!mkdir -p %:p:h<CR>

" Some helpers to edit mode
" http://vimcasts.org/e/14
cnoremap %% <C-R>=expand('%:h').'/'<cr>
nmap <leader>ew :e <C-R>=expand('%:h').'/'<cr>
nmap <leader>es :sp <C-R>=expand('%:h').'/'<cr>
"nmap <leader>ev :vsp <C-R>=expand('%:h').'/'<cr>
nmap <leader>et :tabe <C-R>=expand('%:h').'/'<cr>

" Swap two words
nmap <silent> gw :s/\(\%#\w\+\)\(\_W\+\)\(\w\+\)/\3\2\1/<CR>`'

" Underline the current line with '='
"nmap <silent> <leader>uL :t.\|s/./=/g\|:nohls<cr>
nmap <silent> <leader>uL :t.<CR>Vr=

" Underline the current line with '-'
"nmap <silent> <leader>ul :t.\|s/./-/g\|:nohls<cr>
nmap <silent> <leader>ul :t.<CR>Vr-

" set text wrapping toggles
nmap <silent> <leader>tw :set invwrap<CR>:set wrap?<CR>

" find merge conflict markers
nmap <silent> <leader>fc <ESC>/\v^[<=>]{7}( .*\|$)<CR>

" Map the arrow keys to be based on display lines, not physical lines
map <Down> gj
map <Up> gk

" Toggle hlsearch with <leader>hs
nmap <leader>hs :set hlsearch! hlsearch?<CR>

" Adjust viewports to the same size
map <Leader>= <C-w>=

if has("gui_macvim") && has("gui_running")
  " Map command-[ and command-] to indenting or outdenting
  " while keeping the original selection in visual mode
  vmap <D-]> >gv
  vmap <D-[> <gv

  nmap <D-]> >>
  nmap <D-[> <<

  omap <D-]> >>
  omap <D-[> <<

  imap <D-]> <Esc>>>i
  imap <D-[> <Esc><<i

  " Bubble single lines
  nmap <D-Up> [e
  nmap <D-Down> ]e
  nmap <D-k> [e
  nmap <D-j> ]e

  " Bubble multiple lines
  vmap <D-Up> [egv
  vmap <D-Down> ]egv
  vmap <D-k> [egv
  vmap <D-j> ]egv

  " Map Command-# to switch tabs
  map  <D-0> 0gt
  imap <D-0> <Esc>0gt
  map  <D-1> 1gt
  imap <D-1> <Esc>1gt
  map  <D-2> 2gt
  imap <D-2> <Esc>2gt
  map  <D-3> 3gt
  imap <D-3> <Esc>3gt
  map  <D-4> 4gt
  imap <D-4> <Esc>4gt
  map  <D-5> 5gt
  imap <D-5> <Esc>5gt
  map  <D-6> 6gt
  imap <D-6> <Esc>6gt
  map  <D-7> 7gt
  imap <D-7> <Esc>7gt
  map  <D-8> 8gt
  imap <D-8> <Esc>8gt
  map  <D-9> 9gt
  imap <D-9> <Esc>9gt
else

  " Map command-[ and command-] to indenting or outdenting
  " while keeping the original selection in visual mode
  vmap <A-]> >gv
  vmap <A-[> <gv

  nmap <A-]> >>
  nmap <A-[> <<

  omap <A-]> >>
  omap <A-[> <<

  imap <A-]> <Esc>>>i
  imap <A-[> <Esc><<i

  " Bubble single lines
  nmap <C-Up> [e
  nmap <C-Down> ]e
  nmap <C-k> [e
  nmap <C-j> ]e

  " Bubble multiple lines
  vmap <C-Up> [egv
  vmap <C-Down> ]egv
  vmap <C-k> [egv
  vmap <C-j> ]egv

  " Make shift-insert work like in Xterm
  map <S-Insert> <MiddleMouse>
  map! <S-Insert> <MiddleMouse>

  " Map Control-# to switch tabs
  map  <C-0> 0gt
  imap <C-0> <Esc>0gt
  map  <C-1> 1gt
  imap <C-1> <Esc>1gt
  map  <C-2> 2gt
  imap <C-2> <Esc>2gt
  map  <C-3> 3gt
  imap <C-3> <Esc>3gt
  map  <C-4> 4gt
  imap <C-4> <Esc>4gt
  map  <C-5> 5gt
  imap <C-5> <Esc>5gt
  map  <C-6> 6gt
  imap <C-6> <Esc>6gt
  map  <C-7> 7gt
  imap <C-7> <Esc>7gt
  map  <C-8> 8gt
  imap <C-8> <Esc>8gt
  map  <C-9> 9gt
  imap <C-9> <Esc>9gt
endif

" Insert the current directory into a command-line path
cnoremap <expr> <C-P> getcmdline()[getcmdpos()-2] ==# ' ' ? expand('%:p:h') : "\<C-P>"

" Yank from the cursor to the end of the line, to be consistent with C and D.
nnoremap Y y$


"--------------------
"" File types
"--------------------

filetype plugin indent on " Turn on filetype plugins (:help filetype-plugin)

if has("autocmd")
  " In Makefiles, use real tabs, not tabs expanded to spaces
  au FileType make setlocal noexpandtab

  " This actually might be confusing, but the plugin +ruby+ already does
  " this, so we want to do it only if the plugin +ruby+ is disabled for
  " some reason
  " Set the Ruby filetype for a number of common Ruby files without .rb
  au BufRead,BufNewFile {Gemfile,Rakefile,Vagrantfile,Thorfile,Procfile,config.ru,*.rake} set ft=ruby
  "endif

  " Make sure all mardown files have the correct filetype set and setup wrapping
  "au BufRead,BufNewFile *.{md,markdown,mdown,mkd,mkdn,txt} setf markdown | call s:setupWrapping()

  " Treat JSON files like JavaScript
  au BufNewFile,BufRead *.json set ft=javascript

  " make Python follow PEP8 for whitespace ( http://www.python.org/dev/peps/pep-0008/ )
  "au FileType python setlocal softtabstop=4 tabstop=4 shiftwidth=4

  " Remember last location in file, but not for commit messages.
  " see :help last-position-jump
  au BufReadPost * if &filetype !~ '^git\c' && line("'\"") > 0 && line("'\"") <= line("$")
        \| exe "normal! g`\"" | endif
  au BufRead,BufNewFile *.scss             set ft=scss.css

endif

"set filetypes like textmate
command! FR set filetype=ruby
command! FC set filetype=coffee
command! FCL set filetype=clojure
command! FJ set filetype=javascript
command! FO set filetype=objc
command! FH set filetype=haskell
command! FE set filetype=elixir
command! EL set filetype=erlang
command! FM set filetype=markdown
command! FN set filetype=


autocmd FileType ruby,eruby set omnifunc=rubycomplete#Complete
autocmd FileType ruby,eruby let g:rubycomplete_buffer_loading = 1
autocmd FileType ruby,eruby let g:rubycomplete_rails = 1
autocmd FileType ruby,eruby let g:rubycomplete_classes_in_global = 1


" Use <C-L> to clear the highlighting of :set hlsearch.
if maparg('<C-L>', 'n') ==# ''
  nnoremap <silent> <C-L> :nohlsearch<CR><C-L>
endif

" }}}
" Plugin Configuration--------------------------------------------------- {{{

" ----------------------------
" Ack - Command-Shift-F on OSX
" ----------------------------

"use with ag
let g:ackprg = 'ag --nogroup --nocolor --column'

map <D-F> :Ack<space>
map <leader>f :Ack<space>


" ---------------
" ctrlp
" ---------------
let g:ctrlp_working_path_mode = 2
nnoremap <silent> <D-t> :CtrlPMRU<CR>

let g:ctrlp_custom_ignore = {
      \ 'dir':  '\.git$\|\.hg$\|\.svn$\|cassettes',
      \ 'file': '\.exe$\|\.so$\|\.dll$|\DS_Store$'}

" ---------------
"    Fugitive
" ---------------

nnoremap <silent> <leader>gs :Gstatus<CR>
nnoremap <silent> <leader>gd :Gdiff<CR>
nnoremap <silent> <leader>gc :Gcommit<CR>
nnoremap <silent> <leader>gb :Gblame<CR>
nnoremap <silent> <leader>gl :Glog<CR>
nnoremap <silent> <leader>gp :Git push<CR>
nnoremap <silent> <Leader>gw :Gwrite<CR>
" Mnemonic, gu = Git Update
nnoremap <silent> <Leader>gu :Git pull<CR>
" Exit a diff by closing the diff window
nnoremap <silent> <Leader>gx :wincmd h<CR>:q<CR>


"----------------
"    Gist
"----------------
if executable("pbcopy")
  " The copy command
  let g:gist_clip_command = 'pbcopy'
elseif executable("xclip")
  " The copy command
  let g:gist_clip_command = 'xclip -selection clipboard'
elseif executable("putclip")
  " The copy command
  let g:gist_clip_command = 'putclip'
endif

" detect filetype if vim failed auto-detection.
let g:gist_detect_filetype = 1


"------------------
" Toggle Gundo
"------------------
nmap <C-F1> :GundoToggle<CR>
imap <C-F1> <ESC>:GundoToggle<CR>


"------------------
" NERD Commenter
"------------------
if has("gui_macvim") && has("gui_running")
  map <D-/> <plug>NERDCommenterToggle<CR>
  "map <D-/> <plug>NERDCommenterToggle<CR>i
else
  map <leader>/ <plug>NERDCommenterToggle<CR>
  inoremap <leader>/ <Esc><plug>NERDCommenterToggle<CR>i
endif


"------------------
" TagBar
"------------------
map <leader>rt :TagbarToggle<CR>


"------------------
" Syntastic
"------------------

" Show sidebar signs.
let g:syntastic_enable_signs=1
let g:syntastic_quiet_warnings=0
let g:syntastic_auto_loc_list=2


"------------------
" NERD Tree
"------------------

map <leader>n :NERDTreeToggle<CR>
"map <leader>n :NERDTreeToggle %:p:h<CR>

"view the current buffer in NERDTree helpful in tabs
"nmap <leader>nt :NERDTreeFind<CR>

" set the working directory to the current file
"set autochdir
"autocmd BufEnter * lcd %:p:h

"ignore files on NERDTree
let NERDTreeIgnore=['\.pyc$', '\.pyo$', '\.rbc$', '\.rbo$', '\.class$', '\.o$', '\~$']
let NERDTreeIgnore=['\.pyc', '\~$', '\.swo$', '\.swp$', '\.git', '\.hg', '\.svn', '\.bzr']

"show bookmarks
let NERDTreeShowBookmarks=1
let NERDTreeChDirMode=0
let NERDTreeQuitOnOpen=1
let NERDTreeShowHidden=0
let NERDTreeKeepTreeInNewTab=1

"---------------
" Sessions
"---------------

" bindings
nnoremap <leader>os :OpenSession<CR>
let g:session_autosave="yes"

"-----------------
"session directory
"-----------------
let g:session_directory="~/.vim/sessions"
let g:session_autosave=0
let g:session_autoload=0

"---------------
" Buffergator
" --------------
let g:buffergator_autoexpand_on_split = 0


"------------------
"   Snipmate
"------------------
" Source support_function.vim to support snipmate-snippets.
"if filereadable(expand("~/.vim/bundle/snipmate-snippets/snippets/support_functions.vim"))
  "source ~/.vim/bundle/snipmate-snippets/snippets/support_functions.vim
"endif


"---------------------
" OmniComplete
"---------------------

if has("autocmd") && exists("+omnifunc")
  autocmd Filetype *
        \if &omnifunc == "" |
        \setlocal omnifunc=syntaxcomplete#Complete |
        \endif
endif


" Enable omni completion. Not required if they are already set elsewhere in .vimrc
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS


"--------------------------
" ctags
"---------------------------
set tags=./.git/tags;./tags;/
"set tags+=~/.vimtags

"---------------
"Run Ruby files
"---------------

let g:RubyRunner_open_below = 1
"let g:RubyRunner_keep_focus_key = '<Leader>R'
if has("gui_macvim")
  let g:RubyRunner_key = '<D-r>'
  let g:RubyRunner_keep_focus_key = '<D-R>'
end


" Run ruby inline
nmap <buffer> <M-r> <Plug>(xmpfilter-run)
xmap <buffer> <M-r> <Plug>(xmpfilter-run)
imap <buffer> <M-r> <Plug>(xmpfilter-run)

nmap <buffer> <M-m> <Plug>(xmpfilter-mark)
xmap <buffer> <M-m> <Plug>(xmpfilter-mark)
imap <buffer> <M-m> <Plug>(xmpfilter-mark)

" vim-ruby-doc
let g:ruby_doc_ruby_host = 'http://docs.dev/search/-rubydocs?q='
let g:ruby_doc_rails_host='http://docs.dev/search/-railsdocs?q='


"--------------------------
" Autoclose Tag
"---------------------------
au FileType xhtml,xml ru ftplugin/html/autoclosetag.vim
nmap <Leader>ac <Plug>ToggleAutoCloseMappings


" Ruby Documentation Tools
let g:ruby_doc_command='open'

"
" change background by sunset
let g:sunset_latitude = 39.42
let g:sunset_longitude = 20.47
let g:sunset_utc_offset = 2 "Athens

"-------
" Vroom
"-------

map <Leader>tf :VroomRunNearestTest<CR>
map <Leader>T :VroomRunTestFile<CR>
let g:vroom_use_vimux=1

" }}}

" cocoa plugins settings {{{

"clang_complete
"most stuff taken from here http://appventure.me/2013/01/use-vim-as-xcode-alternative-ios-mac-cocoa.html
" Disable auto completion, always <c-x> <c-o> to complete
let g:clang_complete_auto = 0
let g:clang_use_library = 1
let g:clang_periodic_quickfix = 0
let g:clang_close_preview = 1

" For Objective-C, this needs to be active, otherwise multi-parameter methods won't be completed correctly
let g:clang_snippets = 1

let g:clang_snippets_engine = 'ultisnips'

let g:clang_exec = '/usr/local/bin/clang'
let g:clang_library_path = '/usr/local/lib/libclang.dylib'

" Read the clang complete file
let g:syntastic_objc_config_file = '.clang_complete'

nnoremap <silent> ` :Errors<CR>

" Tell it to use clang instead of gcc
let g:syntastic_objc_checker = 'clang'
"}}}
"Functions----------------------------------------------------------------------- {{{

function! s:setupWrapping()
  set wrap
  set linebreak
  set textwidth=72
  set nolist
endfunction

"-------------------------
" Delete inactive buffers
"-------------------------
function! DeleteInactiveBufs()
  "From tabpagebuflist() help, get a list of all buffers in all tabs
  let tablist = []
  for i in range(tabpagenr('$'))
    call extend(tablist, tabpagebuflist(i + 1))
  endfor

  "Below originally inspired by Hara Krishna Dara and Keith Roberts
  "http://tech.groups.yahoo.com/group/vim/message/56425
  let nWipeouts = 0
  for i in range(1, bufnr('$'))
    if bufexists(i) && !getbufvar(i,"&mod") && index(tablist, i) == -1
      "bufno exists AND isn't modified AND isn't in the list of buffers open in windows and tabs
      silent exec 'bwipeout' i
      let nWipeouts = nWipeouts + 1
    endif
  endfor
  echomsg nWipeouts . ' buffer(s) wiped out'
endfunction
command! Bdi :call DeleteInactiveBufs()

"---------------------
" highlight cursoline
"---------------------

function! CursorPing()
  set cursorline cursorcolumn
  redraw
  sleep 150m
  set nocursorline nocursorcolumn
endfunction

nmap <leader>sc :call CursorPing()<CR>
map <silent> <Leader>cl :set cursorline! <CR>
map <silent> <Leader>cn :set nocursorcolumn nocursorline <CR>

"------------------------------------------------------------------
" This is how i execute ruby tests in terminal when i code on macvim
" see more on this blog post
"------------------------------------------------------------------

" copy to clipboard current path
noremap <silent> <leader>g :let @+=expand("%:p")<CR>

" append to clipboard current path and cursor line number
function! PathAndLineNum()
  :let @+=expand("%:p")
  :let @+ .=":"
  :let @+ .=line(".")
endfunction

" keyboard maestro support
noremap <leader>G :call PathAndLineNum()<CR>


"-------------------------------
" open urls to browsers
" open vundles from github
" [] fix it for local html files
"-------------------------------

ruby <<EOF
  def my_open_uri
    re = %r{https?:\/\/[\S]+}
    vundles_regx = %r{'([\S]+)'}
    line = VIM::Buffer.current.line
    m = line.match(vundles_regx)

    if url = line[re]
      system("open", url)
      VIM::message(url)
    elsif m
      system("open", "http://github.com/" + m[1].to_s)
      VIM::message(url)
    else
      VIM::message("No URI found in line.")
    end
  end
EOF

if !exists("*OpenURI")
  function! OpenURI()
    :ruby my_open_uri
  endfunction
endif
nnoremap <Leader>wf :call OpenURI()<CR><CR>


"---------------------------
"google search current line
"---------------------------
ruby <<EOF
  def search_google
    query = VIM::Buffer.current.line
    system("open", "http://google.com/search?q=#{query}")
  end
EOF
function! SearchGoogle()
  :ruby search_google
endfunction
nnoremap <Leader>we :call SearchGoogle()<CR><CR>

" Documentation via Dash
" [ ] extract it to a plugin

function! DashDocsSearch()
  let current_word = '<cword>'
  :redir => output
  :set filetype
  :redir END
  let match_filetype = matchlist(output, 'filetype=\(\S\+\)')
  let ftype = ''
  if len(match_filetype) > 1
    let ftype = match_filetype[1]
  endif
  let command = 'open dash://'.ftype . ":" .current_word
  call s:execute(command)
endfunction

function! s:execute(cmd)
  let cmd = a:cmd
  if !has("gui_running")
    silent exe '!'.cmd.' &> /dev/null'
    exec ':redraw!'
  else
    exe '!'.cmd.' &> /dev/null &'
  endif
  return v:shell_error
endfunction

nnoremap <Leader>dc :call DashDocsSearch()<cr><cr>

function! SearchDashDocs()
  !open dash://<cword>
endfunction

nnoremap <Leader>dC :call SearchDashDocs()<cr>

" }}}
" Programming Languages--------------------------------------------------- {{{
"-------------------------------------
"          Ruby Support
"-------------------------------------

" around block ruby
" text object for ruby blocks
" http://vimcasts.org/blog/2010/12/a-text-object-for-ruby-blocks/
" https://github.com/kana/vim-textobj-user
if has("autocmd")
  filetype indent plugin on
endif
runtime macros/matchit.vim      "Also require the matchit.vim
au BufRead,BufNewFile *.rb setlocal tags+=~/.vim/tags/ruby_tags
"-----------------------
"   Clojure Support
"------------------------

" --------------------------------------------------------------------
"  Automagic Clojure folding on defn's and defmacro's
" --------------------------------------------------------------------
"
function GetClojureFold()
  if getline(v:lnum) =~ '^\s*(defn.*\s'
    return ">1"
  elseif getline(v:lnum) =~ '^\s*(defmacro.*\s'
    return ">1"
  elseif getline(v:lnum) =~ '^\s*(defmethod.*\s'
    return ">1"
  elseif getline(v:lnum) =~ '^\s*$'
    let my_cljnum = v:lnum
    let my_cljmax = line("$")

    while (1)
      let my_cljnum = my_cljnum + 1
      if my_cljnum > my_cljmax
        return "<1"
      endif

      let my_cljdata = getline(my_cljnum)

      " If we match an empty line, stop folding
      if my_cljdata =~ '^$'
        return "<1"
      else
        return "="
      endif
    endwhile
  else
    return "="
  endif
endfunction

function TurnOnClojureFolding()
  setlocal foldexpr=GetClojureFold()
  setlocal foldmethod=expr
endfunction

autocmd FileType clojure call TurnOnClojureFolding()
"clojure rainbow support
"let g:vimclojure#HighlightBuiltins = 1
"let g:vimclojure#ParenRainbow = 1
"let g:vimclojure#WantNailgun = 1

"au VimEnter * RainbowParenthesesToggle
"au Syntax * RainbowParenthesesLoadRound
"au Syntax * RainbowParenthesesLoadSquare
"au Syntax * RainbowParenthesesLoadBraces

let vimclojure#NailgunClient = "/usr/local/Cellar/vimclojure-nailgun-client/2.3.4/bin/ng"

"coffeescript {{{

"Fold by indentation
au BufNewFile,BufReadPost *.coffee setl foldmethod=indent

"Two-space indentation
au BufNewFile,BufReadPost *.coffee setl shiftwidth=2 expandtab

" run coffee files
autocmd FileType coffee noremap<D-r> :CoffeeRun<cr>
" elixir {{{

autocmd FileType elixir noremap<D-r> :!elixir %<cr>

" }}}
" }}}

" test faster settings
set notimeout
set ttimeout
set timeoutlen=50
